"
" David Dropinski's Vim Configuration
"
" remove all existing autocmds
autocmd!


set nocompatible

" Set filetype stuff to on
filetype on
filetype plugin on
filetype indent on

" Tabstops are 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

" By default, I don't like wrapping
set nowrap
set textwidth=0

" Printing options
set printoptions=header:0,duplex:long,paper:letter

" set the search scan to wrap lines
set wrapscan

" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Make sure that unsaved buffers that are to be put in the background are 
" allowed to go in there (ie. the "must save first" error doesn't come up)
set hidden

" tell VIM to always put a status line in, even if there is only one window
set laststatus=2

" Switch on syntax highlighting.
syntax on

" Keep some stuff in the history
set history=100

" TODO: Do I even use folds???
" These commands open folds
" set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo

" When the page starts to scroll, keep the cursor 8 lines from the top and 8
" lines from the bottom
set scrolloff=3

" Make the command-line completion better
set wildmenu

" Longest common string, please 
set wildmode=longest,list

" Enable search highlighting
set hlsearch

" Incrementally match the search
set incsearch

" highlight current line
set cursorline

" share the macOS pasteboard instead of a Vim register
if $TMUX == ''
  set clipboard+=unnamed 
endif

" Automatically read a file that has changed on disk
set autoread

" Line numbering
set number

" Briefly jump to the matching bracket/paren/etc.
set showmatch

" show visual indicator of >80c lines
" hitting 80 lines is death
" set colorcolumn=81

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Leader Things
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" System default for mappings is now the "," character
let mapleader = ","


" cd to the directory containing the file in the buffer
nmap <silent> ,cd :lcd %:h<CR>

" Edit the vimrc file
nmap <silent> ,ev :e ~/.vimrc<CR>
nmap <silent> ,sv :so ~/.vimrc<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Splits with <c-hjkl>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Open splits to the right, bottom
set splitbelow
set splitright


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maybe a little wild
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Stop typing jj during input mode like a dummy
imap jj <esc>
" Stop typing jj during command-line mode like a dummy
cmap jj <esc>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocmds 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimrcEx
  " Clear all autocmds in the group
  autocmd!
  autocmd FileType text setlocal textwidth=78
  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  "for ruby, autoindent with two spaces, always expand tabs
  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt;
  autocmd BufRead *.markdown  set ai formatoptions=tcroqn2 comments=n:&gt;

  " Leave the return key alone when in command line windows, since it's used
  " to run commands there.
  autocmd! CmdwinEnter * :unmap <cr>
  autocmd! CmdwinLeave * :call MapCR()

  " *.md is markdown
  autocmd! BufNewFile,BufRead *.md setlocal ft=

  " javascript
  autocmd! FileType javascript set sw=2 sts=2 expandtab autoindent smartindent nocindent
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status Line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" function! DerekFugitiveStatusLine()
"  let status = fugitive#statusline()
"  let trimmed = substitute(status, '\[Git(\(.*\))\]', '\1', '')
"  let trimmed = substitute(trimmed, '\(\w\)\w\+[_/]\ze', '\1/', '')
"  let trimmed = substitute(trimmed, '/[^_]*\zs_.*', '', '')
"  if len(trimmed) == 0
"    return ""
"  else
"    return '(' . trimmed[0:10] . ')'
"  endif
"endfunction

" Set the status line the way i like it
":set statusline=%f\ %m\ %r%{DerekFugitiveStatusLine()}\ Line:%l/%L[%p%%]\ Col:%v\ Buf:#%n\ [%b][0x%B]


function! DerekFugitiveStatusLine()
  let status = fugitive#statusline()
  let trimmed = substitute(status, '\[Git(\(.*\))\]', '\1', '')
  let trimmed = substitute(trimmed, '\(\w\)\w\+[_/]\ze', '\1/', '')
  let trimmed = substitute(trimmed, '/[^_]*\zs_.*', '', '')
  if len(trimmed) == 0
    return ""
  else
    return '(' . trimmed[0:10] . ')'
  endif
endfunction

" Set the status line the way i like it
" set stl=%f\ %m\ %r%{DerekFugitiveStatusLine()}\ Line:%l/%L[%p%%]\ Col:%v\ Buf:#%n\ [%b][0x%B]
set statusline=%F%m%r%h%w\ %{fugitive#statusline()}\ [%l,%c]\ [%L,%p%%]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colorize
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:set t_Co=256 " 256 colors
set background=dark
" TODO: Back to the old colorscheme?
color grb256


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Ctrl-P -- https://github.com/ctrlpvim/ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_working_path_mode = 'ra'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Very Fancy
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TODO: Check out Gary Bernhardt's Test running business
