"
" David Dropinski's Vim Configuration
"
" remove all existing autocmds
autocmd!

set nocompatible

" Set filetype stuff to on
filetype on
filetype plugin on
filetype indent on

" Tabstops are 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

" By default, I don't like wrapping
set nowrap
set textwidth=0

" Printing options
set printoptions=header:0,duplex:long,paper:letter

" set the search scan to wrap lines
set wrapscan

" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Make sure that unsaved buffers that are to be put in the background are 
" allowed to go in there (ie. the "must save first" error doesn't come up)
set hidden

" tell VIM to always put a status line in, even if there is only one window
set laststatus=2

" Switch on syntax highlighting.
syntax on

" Keep some stuff in the history
set history=100

" When the page starts to scroll, keep the cursor 8 lines from the top and 8
" lines from the bottom
set scrolloff=3

" Make the command-line completion better
set wildmenu

" Longest common string, please 
set wildmode=longest,list

" Enable search highlighting
set hlsearch

" Incrementally match the search
set incsearch

" highlight current line
set cursorline

" share the macOS pasteboard instead of a Vim register
if $TMUX == ''
  set clipboard+=unnamed 
endif

" Automatically read a file that has changed on disk
set autoread

" Line numbering
set number

" Briefly jump to the matching bracket/paren/etc.
set showmatch

" Use persistent undo history
if !isdirectory("/tmp/.vim-undo-dir")
  call mkdir("/tmp/.vim-undo-dir", "", 0700)
endif
set undodir=/tmp/.vim-undo-dir
set undofile

" show visual indicator of >80c lines
" hitting 80 lines is death
" set colorcolumn=81

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Specifies the directory to use for plugins
call plug#begin('~/.vim/plugged')

" Navigation
Plug 'mileszs/ack.vim'
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" netrw extras
Plug 'tpope/vim-vinegar'

" Editing Utility
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'

" Git Tools
" Basically, overkill for only opening Github URLs automatically
Plug 'tpope/vim-rhubarb'
" Inline git commands
Plug 'tpope/vim-fugitive'

" Terraform
Plug 'hashivim/vim-terraform'

" Automatically disable search highlighting
Plug 'romainl/vim-cool'

" React
Plug 'maxmellon/vim-jsx-pretty'

" Typescript
Plug 'Quramy/tsuquyomi'
Plug 'w0rp/ale'
Plug 'leafgarland/typescript-vim'

" Csharp
Plug 'OmniSharp/omnisharp-vim'

" Rust
Plug 'rust-lang/rust.vim'

" Python
Plug 'davidhalter/jedi-vim'

" Color schemes
Plug 'jonathanfilip/vim-lucius'


" Aspriational plugins
" Figure out a good way to run TS tests quickly -- dispatch would be able to
" kick off async windows, which might be exactly right, unless I just want to
" suspend and `fg`
" Plug 'tpope/vim-dispatch'

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Leader Things
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" System default for mappings is now the "," character
let mapleader = ","


" cd to the directory containing the file in the buffer
nmap <silent> ,cd :lcd %:h<CR>

" Yank to system copy-paste buffer with ,y
map <Leader>y "*y

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Splits with <c-hjkl>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Open splits to the right, bottom
set splitbelow
set splitright


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maybe a little wild
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Stop typing jj during input mode like a dummy
imap jj <esc>
" Stop typing jj during command-line mode like a dummy
cmap jj <esc>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Can I retrain myself to use <C-c>?
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
inoremap <c-c> <esc>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Autocmds 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimrcEx
  " Clear all autocmds in the group
  autocmd!
  autocmd FileType text setlocal textwidth=120
  autocmd FileType gitcommit setlocal spell

  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " for c#, autoindent with 4 spaces
  autocmd! FileType cs set sw=4 sts=4 et

  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt;
  autocmd BufRead *.markdown  set ai formatoptions=tcroqn2 comments=n:&gt;

  " *.md is markdown
  autocmd! BufNewFile,BufRead *.md setlocal ft=

  " javascript
  autocmd! FileType javascript set sw=2 sts=2 expandtab autoindent smartindent nocindent
  autocmd! FileType json set sw=2 sts=2 expandtab

  " python
  autocmd! FileType python set shiftwidth=4 tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent

  " Vim 8.2 adds built-in JSX support which seems broken. Setting these
  " filetypes lets the installed plugins deal with JSX/TSX instead.
  autocmd bufnewfile,bufread *.tsx set filetype=typescript.tsx
  autocmd bufnewfile,bufread *.jsx set filetype=javascript.jsx
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status Line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! DerekFugitiveStatusLine()
  let status = fugitive#statusline()
  let trimmed = substitute(status, '\[Git(\(.*\))\]', '\1', '')
  let trimmed = substitute(trimmed, '\(\w\)\w\+[_/]\ze', '\1/', '')
  let trimmed = substitute(trimmed, '/[^_]*\zs_.*', '', '')
  if len(trimmed) == 0
    return ""
  else
    return '(' . trimmed[0:10] . ')'
  endif
endfunction

" Set the status line the way i like it
" set stl=%f\ %m\ %r%{DerekFugitiveStatusLine()}\ Line:%l/%L[%p%%]\ Col:%v\ Buf:#%n\ [%b][0x%B]
set statusline=%F%m%r%h%w\ %{fugitive#statusline()}\ [%l,%c]\ [%L,%p%%]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colorize
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :set t_Co=256 " 256 colors
set background=dark
" TODO: Back to the old colorscheme?
:set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

:color grb-lucius
GrbLuciusDark
" :color grb-lucious
" GrbLuciusDarkHighContrast


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Ctrl-P -- https://github.com/ctrlpvim/ctrlp.vim
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_working_path_mode = 'ra'
" Ignore files in .gitignore
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
" nnoremap <Leader>f :CtrlP<CR>

" FZF
let g:fzf_vim = {}
let g:fzf_vim.preview_window = ['right,50%', 'ctrl-\']
nnoremap <silent> <C-p> :Files<CR>

" Ack.vim
" Any empty ack search will search for the work the cursor is on
let g:ack_use_cword_for_empty_search = 1

" Substitute for ag, rg, whatever
if executable('rg')
  " --smart-case -> Search case insensitive if all lowercase pattern, Search case sensitively otherwise
  let g:ackprg = 'rg --vimgrep --smart-case'
endif

" OmniSharp-Vim
let g:OmniSharp_server_stdio = 1
nnoremap <Leader><Space> :OmniSharpGetCodeActions<CR>


let g:OmniSharp_popup_options = {
\ 'highlight': 'Normal',
\ 'padding': [1],
\ 'border': [1]
\}

" Don't autoselect first omnicomplete option, show options even if there is
" only one (so the preview documentation is accessible). Remove 'preview',
" 'popup'
" and 'popuphidden' if you don't want to see any documentation whatsoever.
" Note that neovim does not support `popuphidden` or `popup` yet: 
" https://github.com/neovim/neovim/issues/10996
" set completeopt=longest,menuone,preview,popuphidden

" Highlight the completion documentation popup background/foreground the
" same as
" the completion menu itself, for better readability with highlighted
" documentation.
" set completepopup=highlight:Pmenu,border:off

" Fetch full documentation during omnicomplete requests.
" By default, only Type/Method signatures are fetched. Full documentation can
" still be fetched when you need it with the :OmniSharpDocumentation command.
" let g:omnicomplete_fetch_full_documentation = 1

" Set desired preview window height for viewing documentation.
" You might also want to look at the echodoc plugin.
" set previewheight=5


augroup omnisharp_commands
  " The following commands are contextual, based on the cursor position.
  autocmd FileType cs nnoremap <buffer> <Leader>d :OmniSharpGotoDefinition<CR>
  autocmd FileType cs nnoremap <buffer> <Leader>D :OmniSharpTypeLookup<CR>
  autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>
  autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
  autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>
  autocmd FileType cs nnoremap <buffer> <Leader>cf :OmniSharpCodeFormat<CR>
augroup END

augroup ale_commands
  " The following commands are contextual, based on the cursor position.
  autocmd FileType rust nnoremap <buffer> <Leader>d :ALEGoToDefinition<CR>
  autocmd FileType rust nnoremap <buffer> <Leader>fu :ALEFindReferences<CR>

  autocmd FileType typescript,typescript.tsx nnoremap <buffer> <Leader>d :TsuDefinition<cr>
  autocmd FileType typescript,typescript.tsx nnoremap <buffer> <Leader>D :TsuTypeDefinition<cr>
  autocmd FileType typescript,typescript.tsx nnoremap <buffer> <Leader>fu :TsuReferences<cr>
  autocmd FileType typescript,typescript.tsx nnoremap <buffer> <Leader>fi :TsuImplementation<cr>
  autocmd FileType typescript,typescript.tsx nnoremap <buffer> <Leader>F :ALEFix<cr>
  autocmd FileType typescript,typescript.tsx nmap <buffer> <Leader>t : <C-u>echo tsuquyomi#hint()<CR>
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-jedi -- Python Keybinds
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:jedi#goto_command = "<leader>fi"
let g:jedi#goto_assignments_command = "<leader>d"
let g:jedi#goto_definitions_command = "<leader>D"
let g:jedi#usages_command = "<leader>fu"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ALE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ale_linters = {
      \ 'cs': ['OmniSharp'],
      \ 'javascript': ['eslint'],
      \ 'typescript': ['tsserver', 'eslint'],
      \ 'typescript.tsx': ['tsserver', 'eslint'],
      \ 'rust': ['analyzer'],
\}

let g:ale_fixers = {
      \ 'javascript': ['eslint'],
      \ 'typescript': ['eslint'],
      \ 'typescript.tsx': ['eslint'],
\}

let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_delay = 0
let g:ale_set_quickfix = 0
let g:ale_set_loclist = 0

nnoremap gj :ALENextWrap<cr>
nnoremap gk :ALEPreviousWrap<cr>
nnoremap g1 :ALEFirst<cr>

let g:rustfmt_autosave = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tsuquyomi
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-ale handles TypeScript quickfix, so tell Tsuquyomi not to do it.
let g:tsuquyomi_disable_quickfix = 1
let g:tsuquyomi_shortest_import_path = 1
let g:tsuquyomi_single_quote_import = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" InsertTime COMMAND
" Insert the current time
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! InsertTime :normal a<c-r>=strftime('%F %H:%M:%S.0 %z')<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Very Fancy
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TODO: Check out Gary Bernhardt's Test running business

